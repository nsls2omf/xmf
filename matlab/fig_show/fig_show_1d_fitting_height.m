function fig_show_1d_fitting_height(x1d, z1d_measured, z1d_fit, z1d_res, params_target, params_fit ...
    , params_ci, str_title)

x1d_mm = x1d*1e3;
z1d_measured_um = z1d_measured*1e6;
z1d_fit_um = z1d_fit*1e6;
z1d_res_nm = z1d_res*1e9;

cs = lines(7);
font_size = 16;
large_font_size = 24;
marker_size = 6;
line_width = 3;

figure('Position', [100, 100, 1500, 600]);
tiledlayout(3, 3 ...
    , 'TileSpacing', 'tight' ...
    , 'Padding', 'tight' ...
    );

% Data
nexttile([2, 2]);
plot(x1d_mm, z1d_measured_um, 'o', 'MarkerSize', 8); 
hold on;
plot(x1d_mm, z1d_fit_um, 'LineWidth', 4); 
plot(params_fit.x_i*1e3, interp1(x1d_mm, z1d_fit_um, params_fit.x_i*1e3), 'ro', 'MarkerSize', marker_size, 'MarkerFaceColor', 'r'); 
set(gca, 'xTickLabel', []);
ylabel('z [Âµm]');
title(str_title);


nexttile;
text(0.5, 1, 'Target parameters:' ...
    , 'Units', 'normalized' ...
    , 'FontSize', large_font_size ...
    , 'HorizontalAlignment', 'Center' ...
    , 'FontWeight', 'Bold' ...
    , 'Color', 'k' ...
    );
text(0, 0.4, parameter_to_string(params_target) ...
    , 'Units', 'normalized' ...
    , 'FontSize', font_size ...
    , 'HorizontalAlignment', 'Left' ...
    , 'Interpreter', 'latex' ...
    );
axis off;

nexttile;
text(0.5, 1, 'Fitted parameters:' ...
    , 'Units', 'normalized' ...
    , 'FontSize', large_font_size ...
    , 'HorizontalAlignment', 'Center' ...
    , 'FontWeight', 'Bold' ...
    , 'Color', cs(2,:) ...
    );
text(0, 0.4, parameter_to_string(params_fit, params_ci) ...
    , 'Units', 'normalized' ...
    , 'FontSize', font_size ...
    , 'HorizontalAlignment', 'Left' ...
    , 'Interpreter', 'latex' ...
    );
axis off;

% Residual
nexttile([1, 2]);
plot([min(x1d_mm), max(x1d_mm)], [0, 0], 'k');
hold on;
plot(x1d_mm, z1d_res_nm, 'o-' ...
    , 'MarkerSize', marker_size ...
    , 'MarkerFaceColor', cs(1,:) ...
    , 'MarkerEdgeColor', cs(1,:) ...
    , 'Color', cs(1,:) ...
    );
xlabel('x [mm]');
ylabel('Residual [nm]');

str_rms = sprintf('Resiudal:\n%.2f nm RMS', nanstd(z1d_res_nm, 1));
ax = nexttile;
text(ax, 0.5, 0.5, str_rms ...
    , 'Units', 'normalized' ...
    , 'FontSize', large_font_size ...
    , 'FontWeight', 'Bold' ...
    , 'HorizontalAlignment', 'center' ...
    , 'Color', cs(1,:) ...
    );
axis off;



function cell = parameter_to_string(params, params_ci)

if nargin == 1
    
    cell = { sprintf('($p$, $q$, $\\theta$) = ($%.4g$ m, $%.4g$ m, $%.4g$ mrad)' ...
        , params.p...
        , params.q ...
        , params.theta * 1e3 ...
        ) ...
        , sprintf('($x_i$, $z_i$) = ($%.4g$ mm, $%.4g$ mm)' ...
        , params.x_i * 1e3 ...
        , params.z_i * 1e3 ...
        ) ...
        , sprintf('$\\beta$ = $%.4g$ $\\mu$rad' ...
        , params.beta * 1e6 ...
        ) ...
        };

elseif nargin == 2
    
    [str_p, str_q, str_theta, str_x_i, str_z_i, str_beta] = get_height_string(params_ci);

    cell = { sprintf('($%s$, $%s$, $%s$) = ($%.4g$ m, $%.4g$ m, $%.4g$ mrad)' ...
        , str_p ...
        , str_q ...
        , str_theta ...
        , params.p...
        , params.q ...
        , params.theta * 1e3 ...
        ) ...
        , sprintf('($%s$, $%s$) = ($%.4g$ mm, $%.4g$ mm)' ...
        , str_x_i ...
        , str_z_i ...
        , params.x_i * 1e3 ...
        , params.z_i * 1e3 ...
        ) ...
        , sprintf('$%s$ = $%.4g$ $\\mu$rad' ...
        , str_beta ...
        , params.beta * 1e6 ...
        ) ...
        };
    
else
    error('Unexpected input argument numbers.');
end



function [str_p, str_q, str_theta, str_x_i, str_z_i, str_beta] = get_height_string(params_ci)

if if_opt(params_ci.p)
    str_p = '\hat{p}';
else
    % str_p = '\underline{p}';
    str_p = 'p';
end

if if_opt(params_ci.q)
    str_q = '\hat{q}';
else
    % str_q = '\underline{q}';
    str_q = 'q';
end

if if_opt(params_ci.theta)
    str_theta = '\hat{\theta}';
else
    % str_theta = '\underline{\theta}';
    str_theta = '\theta';
end

if if_opt(params_ci.x_i)
    str_x_i = '\hat{x_i}';
else
    % str_x_i = '\underline{x_i}';
    str_x_i = 'x_i';
end

if if_opt(params_ci.z_i)
    str_z_i = '\hat{z_i}';
else
    % str_z_i = '\underline{z_i}';
    str_z_i = 'z_i';
end

if if_opt(params_ci.beta)
    str_beta = '\hat{\beta}';
else
    % str_beta = '\underline{\beta}';
    str_beta = '\beta';
end




function b_res = if_opt(ci)
b_res = all(isfinite(ci));
